---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: secure-kube-pipeline
spec:
  params:
    - name: repository
      description: the git repo containing source code. If empty, the repository url will be found from toolchain
      default: ""
    - name: branch
      description: the branch for the git repo
      default: "master"
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: fail-on-lint-errors
      description: force failure of task when docker lint errors are found
      default: "true"
    - name: fail-on-scanned-issues
      description: force failure of task when vulnerability advisor scan issues are found
      default: "true"
    - name: path-to-context
      default: "."
    - name: path-to-dockerfile
      default: "."
    - name: dockerfile
      default: "Dockerfile"
    - name: build-args
      description: ibmcloud cr build argument list in the format 'KEY=VALUE' with a key-value pair per line.
      default: ""
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    - name: app-name
      description: application name
    - name: image-name
      description: image name
    - name: deployment-file
      description: file containing the kubernetes deployment definition
      default: "deployment.yml"
    - name: dev-region
    - name: dev-resource-group
    - name: cluster-name
      description: the name of the cluster to target
    - name: dev-cluster-namespace
      description: the namespace
    - name: pipeline-debug
      default: "0"
    - name: pr-url
      description: pr url
    - name: commit-timestamp
    - name: scm-type
    - name: project-id
      default: ""
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: extract-repository-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          # if a params.repository is given, it takes precedence
          value: '. as $toolchain | ["$(params.repository)"] | if .[0]=="" then $toolchain | .services[] | select(.toolchain_binding.name=="repo") | .dashboard_url else .[0] end'
        - name: pipeline-debug
          value: $(params.pipeline-debug)  
    - name: git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "toolchain-apikey"
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: extract-doi-enablement
      taskRef:
        name: toolchain-extract-value
      params:
        # count the number of service in the toolchain that are DevopsInsights
        - name: expression
          value: 'reduce .services[] as $service (0; if $service.service_id=="draservicebroker" then .+1 else . end)'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: publish-doi-buildrecord
      runAfter: [extract-doi-enablement]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-buildrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: app-name
          value: $(params.app-name)
        - name: git-repository
          value: $(tasks.git-clone.results.git-repository)
        - name: git-branch
          value: $(tasks.git-clone.results.git-branch)
        - name: git-commit
          value: $(tasks.git-clone.results.git-commit)
    - name: cra-discovery-scan
      runAfter:
        - git-clone
      taskRef:
        name: cra-discovery
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: commit-id
          value: $(tasks.git-clone.results.git-commit)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: directory-name
          value: ""
        - name: commit-timestamp
          value: $(params.commit-timestamp)
    - name: code-vulnerability-scan
      runAfter:
        - cra-discovery-scan
      taskRef:
        name: cra-vulnerability-remediation
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: secrets
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.git-clone.results.git-commit)
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id) 
    - name: cra-cis-check
      taskRef:
        name: cra-cis-check
      runAfter:
        - cra-discovery-scan
      workspaces:
        - name: secrets
          workspace: pipeline-ws
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.git-clone.results.git-commit)
        - name: directory-name
          value: ""
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id)
    - name: cra-bom
      taskRef:
        name: cra-bom
      runAfter:
        - cra-discovery-scan
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: secrets
          workspace: pipeline-ws          
      params:
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.git-clone.results.git-commit)
        - name: target-branch
          value: $(params.branch)
        - name: target-commit-id
          value: $(tasks.git-clone.results.git-commit)      
        - name: scm-type
          value: $(params.scm-type)
        - name: project-id
          value: $(params.project-id)
    - name: docker-lint
      runAfter: [git-clone]
      taskRef:
        name: linter-docker-lint
      params:
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: fail-on-lint-errors
          value: $(params.fail-on-lint-errors)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: unit-tests
      runAfter: [docker-lint]
      taskRef:
        name: tester-run-tests
      params:
        - name: tests-script
          value: |
            if [ -f ./test/run-tests.sh ]; then
              source ./test/run-tests.sh
              echo -n $FILE_LOCATIONS > $(results.test-result-file-paths.path)
              echo -n $TEST_TYPES > $(results.test-types.path)
            else
              echo "Test runner script not found: ./test/run-tests.sh"
            fi
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-code-tests
      runAfter: [unit-tests]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: "$(tasks.unit-tests.results.test-result-file-paths)"
        - name: test-types
          value: "$(tasks.unit-tests.results.test-types)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: containerize
      runAfter: [unit-tests]
      taskRef:
        name: icr-containerize
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: registry-region
          value: $(params.registry-region)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: image-name
          value: $(params.image-name)
        - name: path-to-context
          value: $(params.path-to-context)
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: build-args
          value: $(params.build-args)
        - name: additional-tags-script
          value: |
            # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
            # e.g. 3-master-50da6912-20181123114435
            # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
            GIT_BRANCH="$(tasks.git-clone.results.git-branch)"
            GIT_COMMIT="$(tasks.git-clone.results.git-commit)"
            TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 )
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
            echo "$IMAGE_TAG"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: vulnerability-advisor
      taskRef:
        name: icr-check-va-scan
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: scan-report-file
          value: 'app-image-va-report.json'
        - name: fail-on-scanned-issues
          value: $(params.fail-on-scanned-issues)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: image-url
          value: $(tasks.containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.containerize.results.image-digest)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-va-scan-record
      runAfter: [vulnerability-advisor]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: $(tasks.vulnerability-advisor.results.scan-report-file)
        - name: test-types
          value: vulnerabilityadvisor
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: deploy-to-kubernetes
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [vulnerability-advisor]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
            export DEPLOYMENT_FILE="$(params.deployment-file)"
            # pipeline build number is the doi build record id (if any)
            export SOURCE_BUILD_NUMBER=$BUILD_NUMBER
            echo "SOURCE_BUILD_NUMBER=$BUILD_NUMBER" >> build.properties
            # For doi plugin invocation if needed
            export TOOLCHAIN_ID=$PIPELINE_TOOLCHAIN_ID
            # Single tag for the image built
            export IMAGE_TAG=$IMAGE_TAGS
            # Keep it in build.properties shuttle file
            echo "IMAGE_TAG=$IMAGE_TAGS" >> build.properties
        - name: script
          value: |
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/check_and_deploy_kubectl.sh) and 'source' it from your pipeline job
            #    source ./scripts/check_and_deploy_kubectl.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_and_deploy_kubectl.sh")
            # ------------------
            # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_and_deploy_kubectl.sh

            # This script checks the IBM Container Service cluster is ready, has a namespace configured with access to the private
            # image registry (using an IBM Cloud API Key), perform a kubectl deploy of container image and check on outcome.
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_and_deploy_kubectl.sh")
        - name: post-execution-script
          value: |
            # Keep APP_URL in build.properties shuttle file
            echo "APP_URL=$APP_URL" >> build.properties
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-deployable-task
      runAfter: [deploy-to-kubernetes]
      taskRef:
        name: toolchain-publish-deployable-mapping
      params:
        - name: deployable-type
          value: "kubernetes_cluster"
        - name: deployable-region-id
          value: $(tasks.deploy-to-kubernetes.results.region)
        - name: deployable-guid
          value: $(tasks.deploy-to-kubernetes.results.cluster-id)
        - name: deployable-rg-id
          value: $(tasks.deploy-to-kubernetes.results.resource-group-id)
        - name: environment-label
          value: "$(params.cluster-name) namespace:$(params.dev-cluster-namespace)"
        - name: git-inputs
          value: "$(tasks.git-clone.results.git-repository),$(tasks.git-clone.results.git-commit),$(tasks.git-clone.results.git-branch)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: check-health
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [deploy-to-kubernetes]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
        - name: script
          value: |
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/check_health.sh) and 'source' it from your pipeline job
            #    source ./scripts/check_health.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh")
            # ------------------
            # source: https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh
            # Check liveness and readiness probes to confirm application is healthy
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_health.sh")
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
